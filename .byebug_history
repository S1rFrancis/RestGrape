continue
result.blank?
result
continue
data.first
continue
data
continue
result
next
continue
result
next
continue
next
continue
Service.where({ id: 1 })
Service.where({ id: 2 }).first
Service.where({ id: 2 })
Service.find_by_id(1)
company_service
next
continue
company_service
company_service.inspect
company_service.service
next
result
continue
result
continue
result
continue
record.nil?
record.present?
record.blank?
(record.blank? && record.present?)
record
next
company
record
continue
next
record.present?
record.presence
record.blank?
company.presence
record
company
continue
result
continue
result
continue
result
continue
next
company_services.first
company_services
continue
result
continue
company
exit
company
exit
result
continue
result.class == Net::HTTPCreated
result.class.to_s == "Net::HTTPCreated"
result.class == "Net::HTTPCreated"
result.class == "HTTPCreated"
result.class
result.to_s
result.inspect
result
continue
result["created"]
result
continue
result
result["created"]
exit
continue
description
name
continue
next
company.inspect
next
description
name
exit
description
name
exit
request["company"].class
request["company"]
exit
x
x = Hash.new(request["company"])
request["company"].to_h
request["company"].class
request["company"]
description
request["company"]["name"]
request["company"]
name
continue
request["name"]
request["company"]
request
continue
request.to_s
request.header
request.headers
request.body
request.data
request
request.inspect
result
continue
result
continue
request.headers["Api-Token"]
request.headers
request["API-Token"]
continue
request["API-Token"]
request
continue
request["API-Token"]
result
continue
result
continue
result
continue
result
continue
request["API-Token"]
request.inspect
continue
uri.inspect
result.inspect
result
continue
uri.inspect
request.inspect
request.header
request.headers
request
result
continue
result
continue
result
continue
next
uri
request.inspect
request
exit
Service.where( { service: @serv, price: @price, duration: @duration, disabled: @disabled, company_id: company.id})
record.blank?
record
exit
Service.where( { service: @serv, price: @price, duration: @duration, disabled: @disabled, company_id: company.id })
@disabled
exit
@disabled
Service.where( { service: @serv, company_id: company.id })
Service.where( { service: @serv, price: @price, duration: @duration, disabled: @disabled, company_id: company.id })
company.id
exit
company.id
exit
@company
@company.class
@company
@company.id
@company_id
Service.where( {@company_id})
Service.where( { company_id: @company_id })
Service.where( { price: @price})
@disabled
Service.where( { disabled: @disabled})
Service.where( { service: @serv, price: @price, duration: @duration, disabled: @disabled, company_id: @company.id })
Company.where({ name: @company_name, description: @company_description})
record.blank?
continue
record.blank?
record
exit
company.first.class
company.first.id
company.first
company.size
company.id
company.ids
company.id
company.name
company
exit
uniqueCompanyService?
exit
uniqueRecord?
exit
record.blank?
record.presence
record
next
step
uniqueCompany?(company_name, company_description)
exit
self.uniqRecord?(row[0], row[1], row[2], row[3], row[4], row[5], row[6])
exit
record.presence
record.presence?
record.presence
continue
record.inspect
record
exit
record.inspect
record
exit
record.inspect
record
exit
record.inspect
record
exit
continue
exit
continue
exit
continue
data[0]
data[1]
data.size
row.to_s
row[6]
row.seventh
row.six
row.sixth
row.fifth
row.fith
row.fourth
row.third
row.second
row.first
continue
data.to_s
continue
next
